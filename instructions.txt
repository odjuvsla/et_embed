
# unpack the code
[odjuvsla@marvin:/tmp]$ tar -zxf odjuvsla-et_embed-23d3c89.tar.gz

# Enter the directory
[odjuvsla@marvin:/tmp]$ cd odjuvsla-et_embed-23d3c89

# Copying partially reconstructed (up to the digit level) data into a directory we will run from 
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ cp data.good data -r

# Extract simulated digits and write them to a file ("mydigits.root")
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ aliroot "testEmbedder.C(1)" -q

# Embed the digits into the real data
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ aliroot "testEmbedder.C(0)" -q

# Go to the data directory
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ cd data

# Start reconstruction of the embedded real data
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89/data]$ aliroot recEmbed.C

# Return to previous directory
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89/data]$ cd ../

# Start aliroot
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ aliroot

# Compile the script for checking the data
root [0] .L checkEmbed.C+g

# Run it
root [1] checkEmbed()

# Run it
root [1] checkEmbed()

# Exit
root [2] .q

# Have a look at the histograms and draw an efficiency plot (with horrible statistics)
[odjuvsla@marvin:/tmp/odjuvsla-et_embed-23d3c89]$ root hists.root                                                                                                                                                                    (11-09 22:33)
  *******************************************
  *                                         *
  *        W E L C O M E  to  R O O T       *
  *                                         *
  *   Version  5.28/00f     4 August 2011   *
  *                                         *
  *  You are welcome to visit our Web site  *
  *          http://root.cern.ch            *
  *                                         *
  *******************************************

ROOT 5.28/00f (tags/v5-28-00f@40489, Aug 08 2011, 12:32:14 on linuxx8664gcc)

CINT/ROOT C/C++ Interpreter version 5.18.00, July 2, 2010
Type ? for help. Commands must be C++ statements.
Enclose multiple statements between { }.
root [0] 
Attaching file hists.root as _file0...
root [1] .ls
TFile**         hists.root
 TFile*         hists.root
  KEY: TH1D     hEnergyOfLabeled;1      hEnergyOfLabeled
  KEY: TH1D     hEnergyOfNonLabeled;1   hEnergyOfNonLabeled
  KEY: TH1D     hEnergyOfAll;1  hEnergyOfAll
  KEY: TH1D     hPidOfLabeled;1 hPidOfLabeled
  KEY: TH1D     hFractionOfLabeled;1    hFractionOfLabeled
  KEY: TH1D     hNcellsLabled;1 hNcellsLabled
  KEY: TH2D     hNcellsvsFrac;1 hNcellsvsFrac
  KEY: TH1D     hEnergyDiff;1   hEnergyDiff
  KEY: TH1D     hGenerated;1    hGenerated
  KEY: TH1D     hFound;1        hFound
  KEY: TH2D     hGeneratedvsClusterMult;1       hGeneratedvsClusterMult
  KEY: TH2D     hFoundvsClusterMult;1   hFoundvsClusterMult
  KEY: TH1D     hFound2;1       hFound2
  KEY: TH1D     hFound3;1       hFound3
  KEY: TH1D     hFound4;1       hFound4
  KEY: TH1I     hClusterMult;1  hClusterMult
  KEY: TH2D     hPosition;1     hPosition
root [2] f = hFound                         
(class TH1D*)0xdfd800
root [3] g = hGenerated
(class TH1D*)0xdfba50
root [4] eff = new TGraphAsymmErrors(f,g)
(class TGraphAsymmErrors*)0xea9210
root [5] eff->Draw("ALP")
Info in <TCanvas::MakeDefCanvas>:  created default TCanvas with name c1

